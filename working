Here's the modified playbook that prioritizes finding sequential IPv6 addresses but will accept any available addresses if enough sequential ones aren't available:

```yaml
---
- name: Allocate available IPv6 addresses in OpenStack
  hosts: localhost
  gather_facts: false
  vars:
    subnet_name: "your-ipv6-subnet"
    num_addresses: 10
    prefer_sequential: true  # Set to false if sequential doesn't matter

  tasks:
    - name: Get subnet information
      openstack.cloud.subnet_info:
        name: "{{ subnet_name }}"
      register: subnet

    - name: Extract subnet details
      set_fact:
        subnet_id: "{{ subnet.subnets[0].id }}"
        network_id: "{{ subnet.subnets[0].network_id }}"
        cidr: "{{ subnet.subnets[0].cidr }}"
        pool_start: "{{ subnet.subnets[0].allocation_pools[0].start }}"
        pool_end: "{{ subnet.subnets[0].allocation_pools[0].end }}"

    - name: Get all allocated IPs in subnet
      openstack.cloud.port_info:
        network: "{{ network_id }}"
      register: all_ports
    - set_fact:
        allocated_ips: "{{ all_ports.ports | map(attribute='fixed_ips') | flatten | selectattr('subnet_id', 'equalto', subnet_id) | map(attribute='ip_address') | list }}"

    - name: Find available sequential block (when preferred)
      block:
        - name: Generate all possible IPs in subnet
          ansible.utils.ip_range:
            start: "{{ pool_start }}"
            end: "{{ pool_end }}"
          register: all_possible_ips

        - name: Find first available sequential block
          set_fact:
            sequential_block: |
              {% set available = [] %}
              {% for ip in all_possible_ips.range %}
                {% if ip not in allocated_ips %}
                  {% set _ = available.append(ip) %}
                  {% if available|length >= num_addresses|int %}
                    {{ available[0:num_addresses|int] }}
                    {% break %}
                  {% endif %}
                {% else %}
                  {% set _ = available.clear() %}
                {% endif %}
              {% endfor %}
          when: prefer_sequential

    - name: Set final IP selection
      set_fact:
        selected_ips: |
          {% if prefer_sequential and sequential_block is defined and sequential_block|length >= num_addresses|int %}
            {{ sequential_block[0:num_addresses|int] }}
          {% else %}
            {# Fallback to any available IPs #}
            {{ (all_possible_ips.range | difference(allocated_ips))[0:num_addresses|int] }}
          {% endif %}

    - name: Verify enough IPs are available
      assert:
        that:
          - selected_ips | length == num_addresses|int
        fail_msg: "Could not find {{ num_addresses }} available IPv6 addresses in subnet"
        success_msg: "Found {{ selected_ips | length }} available IPv6 addresses"

    - name: Display selected IPs
      debug:
        msg: >
          Selected IPs ({{ 'Sequential' if selected_ips == sequential_block[0:num_addresses|int] else 'Non-sequential' }}):
          {{ selected_ips | join(', ') }}

    - name: Reserve the IPs by creating ports
      openstack.cloud.port:
        network: "{{ network_id }}"
        fixed_ips:
          - subnet: "{{ subnet_id }}"
            ip_address: "{{ item }}"
        state: present
      loop: "{{ selected_ips }}"
```

### Key Improvements:

1. **Flexible IP Selection**:
   - First tries to find sequential blocks when `prefer_sequential: true`
   - Falls back to any available IPs if sequential block isn't found
   - Clearly indicates whether the returned IPs are sequential

2. **Better Performance**:
   - Uses `ansible.utils.ip_range` to generate all possible IPs once
   - More efficient scanning for sequential blocks

3. **Enhanced Reporting**:
   - Clearly shows whether the selected IPs are sequential or not
   - Better error messaging

4. **Configurable Behavior**:
   - Set `prefer_sequential: false` if you don't care about ordering
   - Easy to adjust the number of needed addresses

### Usage Examples:

1. **Strictly sequential preferred**:
```yaml
vars:
  prefer_sequential: true
  num_addresses: 10
```

2. **Any available IPs acceptable**:
```yaml
vars:
  prefer_sequential: false
  num_addresses: 10
```

The playbook will automatically handle either case while providing clear feedback about what was allocated.









Here's the updated playbook using `ansible.utils.ipmath` for generating sequential IPv6 addresses:

```yaml
---
- name: Allocate sequential IPv6 addresses in OpenStack using ansible.utils.ipmath
  hosts: localhost
  gather_facts: false
  vars:
    subnet_name: "your-ipv6-subnet"
    num_addresses: 10
    starting_address: "2001:db8::100"  # Optional starting point

  tasks:
    - name: Get subnet information
      openstack.cloud.subnet_info:
        name: "{{ subnet_name }}"
      register: subnet

    - name: Extract subnet details
      set_fact:
        subnet_id: "{{ subnet.subnets[0].id }}"
        cidr: "{{ subnet.subnets[0].cidr }}"
        allocation_pool_start: "{{ subnet.subnets[0].allocation_pools[0].start }}"
        allocation_pool_end: "{{ subnet.subnets[0].allocation_pools[0].end }}"

    - name: Get all port information in the subnet
      openstack.cloud.port_info:
        network: "{{ subnet.subnets[0].network_id }}"
      register: all_ports

    - name: Extract all allocated IPv6 addresses
      set_fact:
        allocated_ips: "{{ all_ports.ports | map(attribute='fixed_ips') | flatten | selectattr('subnet_id', 'equalto', subnet_id) | map(attribute='ip_address') | list }}"

    - name: Generate sequential IPs using ansible.utils.ipmath
      ansible.utils.ipmath:
        address: "{{ starting_address | default(allocation_pool_start) }}"
        increment: "{{ item }}"
      register: ip_generator
      loop: "{{ range(0, num_addresses|int) | list }}"

    - name: Extract generated IPs
      set_fact:
        candidate_ips: "{{ ip_generator.results | map(attribute='transformed') | list }}"

    - name: Filter out allocated IPs
      set_fact:
        available_ips: "{{ candidate_ips | difference(allocated_ips) }}"

    - name: Verify we have enough available IPs
      assert:
        that:
          - available_ips | length >= num_addresses
        fail_msg: "Not enough available IPv6 addresses in the subnet"
        success_msg: "Found {{ available_ips | length }} available IPv6 addresses"

    - name: Select first {{ num_addresses }} available IPs
      set_fact:
        selected_ips: "{{ available_ips[0:num_addresses|int] }}"

    - name: Display selected IPs
      debug:
        msg: "Selected available IPv6 addresses: {{ selected_ips }}"

    - name: Create ports with selected IPs (optional)
      openstack.cloud.port:
        network: "{{ subnet.subnets[0].network_id }}"
        fixed_ips:
          - subnet: "{{ subnet_id }}"
            ip_address: "{{ item }}"
        state: present
      loop: "{{ selected_ips }}"
      when: selected_ips | length > 0
```

### Key Changes Made:

1. **Replaced the set_fact + ipmath approach** with the dedicated `ansible.utils.ipmath` module
2. **Improved IP generation**:
   - Uses a proper filter plugin designed for IP math operations
   - Handles both IPv4 and IPv6 addresses correctly
   - Provides better error handling for invalid addresses

3. **Added registration of results**:
   - Captures output from the ipmath module
   - Extracts transformed IPs from the results

### Prerequisites Update:

You'll need to install the `ansible.utils` collection:

```bash
ansible-galaxy collection install ansible.utils
```

### Advantages of this Approach:

1. **More robust IP address manipulation** - handles edge cases better
2. **Cleaner task structure** - dedicated module for IP math operations
3. **Better error reporting** - module provides specific error messages
4. **Consistent behavior** - uses Ansible's official IP manipulation utilities

The rest of the playbook logic (checking allocated IPs, verifying availability, etc.) remains the same as it wasn't related to the IP math operations.


# Ansible Automation for Sequential IPv6 Address Allocation in OpenStack

Here's a comprehensive solution to get 10 sequential IPv6 addresses from a subnet and verify their availability:

## Complete Playbook

```yaml
---
- name: Allocate sequential IPv6 addresses in OpenStack
  hosts: localhost
  gather_facts: false
  vars:
    subnet_name: "your-ipv6-subnet"
    num_addresses: 10
    starting_address: "2001:db8::100"  # Optional starting point

  tasks:
    - name: Get subnet information
      openstack.cloud.subnet_info:
        name: "{{ subnet_name }}"
      register: subnet

    - name: Extract subnet details
      set_fact:
        subnet_id: "{{ subnet.subnets[0].id }}"
        cidr: "{{ subnet.subnets[0].cidr }}"
        allocation_pool_start: "{{ subnet.subnets[0].allocation_pools[0].start }}"
        allocation_pool_end: "{{ subnet.subnets[0].allocation_pools[0].end }}"

    - name: Get all port information in the subnet
      openstack.cloud.port_info:
        network: "{{ subnet.subnets[0].network_id }}"
      register: all_ports

    - name: Extract all allocated IPv6 addresses
      set_fact:
        allocated_ips: "{{ all_ports.ports | map(attribute='fixed_ips') | flatten | selectattr('subnet_id', 'equalto', subnet_id) | map(attribute='ip_address') | list }}"

    - name: Generate sequential IPs
      set_fact:
        candidate_ips: "{{ candidate_ips | default([]) + [starting_address | ipmath(loop.index)] }}"
      loop: "{{ range(0, num_addresses|int) | list }}"
      when: starting_address is defined

    - name: Generate sequential IPs from pool start if no starting address specified
      set_fact:
        candidate_ips: "{{ candidate_ips | default([]) + [allocation_pool_start | ipmath(loop.index)] }}"
      loop: "{{ range(0, num_addresses|int) | list }}"
      when: starting_address is not defined

    - name: Filter out allocated IPs
      set_fact:
        available_ips: "{{ candidate_ips | difference(allocated_ips) }}"

    - name: Verify we have enough available IPs
      assert:
        that:
          - available_ips | length >= num_addresses
        fail_msg: "Not enough available IPv6 addresses in the subnet"
        success_msg: "Found {{ available_ips | length }} available IPv6 addresses"

    - name: Select first {{ num_addresses }} available IPs
      set_fact:
        selected_ips: "{{ available_ips[0:num_addresses|int] }}"

    - name: Display selected IPs
      debug:
        msg: "Selected available IPv6 addresses: {{ selected_ips }}"

    - name: Create ports with selected IPs (optional)
      openstack.cloud.port:
        network: "{{ subnet.subnets[0].network_id }}"
        fixed_ips:
          - subnet: "{{ subnet_id }}"
            ip_address: "{{ item }}"
        state: present
      loop: "{{ selected_ips }}"
      when: selected_ips | length > 0
```

## Key Components Explained

1. **Subnet Information Retrieval**:
   - Gets details about the specified IPv6 subnet including allocation pools

2. **Port Information Collection**:
   - Fetches all existing ports in the network to identify allocated IPs

3. **IP Generation**:
   - Uses `ipmath` filter to generate sequential addresses
   - Supports both specified starting address and automatic pool start

4. **Availability Check**:
   - Compares generated IPs against allocated IPs
   - Ensures requested number of addresses are available

5. **Port Creation (Optional)**:
   - Creates ports with the selected IPs to reserve them

## Prerequisites

1. Install required collections:
```bash
ansible-galaxy collection install openstack.cloud
```

2. Configure OpenStack credentials (either via `clouds.yaml` or environment variables)

3. Install required Python packages:
```bash
pip install openstacksdk netaddr
```

## Customization Options

- To use a specific starting address, set `starting_address`
- To change the number of addresses, modify `num_addresses`
- To skip port creation, remove the last task
- To verify IPs without reserving them, remove the port creation task

Would you like me to modify any part of this solution to better fit your specific requirements?