# Ansible Playbook to Gather Security Group Rules from Multiple OpenStack Clouds

This playbook will:
1. Connect to multiple OpenStack clouds
2. Retrieve security group rules from each cloud
3. Create a unique consolidated list of all security group rules
4. Save the results to a JSON file

## Prerequisites
- Ansible installed
- `openstacksdk` Python package installed
- OpenStack credentials for each cloud you want to query

## Playbook: `gather_security_group_rules.yml`

```yaml
---
- name: Gather security group rules from multiple OpenStack clouds
  hosts: localhost
  gather_facts: false
  vars:
    output_file: "security_group_rules_consolidated.json"
    clouds:
      - name: "cloud1"
        auth:
          auth_url: "https://cloud1.example.com:5000/v3"
          username: "username"
          password: "password"
          project_name: "project"
          user_domain_name: "Default"
          project_domain_name: "Default"
      - name: "cloud2"
        auth:
          auth_url: "https://cloud2.example.com:5000/v3"
          username: "username"
          password: "password"
          project_name: "project"
          user_domain_name: "Default"
          project_domain_name: "Default"
    # Add more clouds as needed

  tasks:
    - name: Initialize empty list for all security group rules
      ansible.builtin.set_fact:
        all_security_group_rules: []

    - name: Gather security group rules from each cloud
      include_tasks: get_security_group_rules.yml
      loop: "{{ clouds }}"
      loop_control:
        loop_var: cloud

    - name: Create unique list of security group rules
      ansible.builtin.set_fact:
        unique_security_group_rules: "{{ all_security_group_rules | unique }}"

    - name: Save consolidated security group rules to file
      ansible.builtin.copy:
        content: "{{ unique_security_group_rules | to_nice_json }}"
        dest: "{{ output_file }}"
      delegate_to: localhost

    - name: Display summary
      ansible.builtin.debug:
        msg: "Found {{ unique_security_group_rules | length }} unique security group rules. Saved to {{ output_file }}"
```

## Sub-task File: `get_security_group_rules.yml`

```yaml
---
- name: Connect to OpenStack cloud
  ansible.builtin.include_role:
    name: openstack.cloud.auth
  vars:
    auth: "{{ cloud.auth }}"

- name: Get list of all security groups
  openstack.cloud.security_group:
    cloud: "{{ cloud.name }}"
    state: list
  register: security_groups

- name: Extract rules from security groups
  ansible.builtin.set_fact:
    cloud_rules: |
      {% set rules = [] %}
      {% for group in security_groups.security_groups %}
        {% for rule in group.security_group_rules %}
          {% set _ = rules.append(rule | combine({'security_group_name': group.name, 'security_group_id': group.id, 'cloud_name': cloud.name})) %}
        {% endfor %}
      {% endfor %}
      {{ rules }}
  
- name: Add rules to consolidated list
  ansible.builtin.set_fact:
    all_security_group_rules: "{{ all_security_group_rules + cloud_rules }}"

- name: Display count of rules found in this cloud
  ansible.builtin.debug:
    msg: "Found {{ cloud_rules | length }} security group rules in cloud {{ cloud.name }}"
```

## How to Use

1. Save the main playbook as `gather_security_group_rules.yml`
2. Save the sub-task file as `get_security_group_rules.yml` in the same directory
3. Update the `clouds` variable in the playbook with your OpenStack cloud credentials
4. Run the playbook:
   ```
   ansible-playbook gather_security_group_rules.yml
   ```

## Output

The playbook will:
1. Connect to each OpenStack cloud
2. Retrieve all security group rules
3. Create a unique list of rules (removing duplicates)
4. Save the consolidated list to `security_group_rules_consolidated.json`

## Customization

You can customize:
- The output file name by changing the `output_file` variable
- The fields included in the output by modifying the rule extraction in `get_security_group_rules.yml`
- Add more clouds by extending the `clouds` list

Note: For security reasons, consider using Ansible Vault to encrypt your OpenStack credentials rather than storing them in plain text.